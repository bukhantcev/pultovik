# handlers/employees.py
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import is_admin
from db import DBI
from keyboards.inline import get_employees_inline_kb
from utils.dates import human_ru_date

class AddEmployee(StatesGroup):
    waiting_for_last_name = State()
    waiting_for_first_name = State()
    waiting_for_tg_id = State()

class EditEmployeeTg(StatesGroup):
    waiting_for_tg = State()

async def handle_workers(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"); return
    txt = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:" if DBI.list_employees() else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª."
    await message.answer(txt, reply_markup=get_employees_inline_kb())

async def employees_menu_router(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True); return
    data = callback.data or ""
    if data == "emp:add":
        await state.set_state(AddEmployee.waiting_for_last_name)
        await callback.message.answer("–ù–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=ReplyKeyboardRemove())
        await callback.answer(); return
    if data.startswith("emp:show:"):
        disp = data.split(":", 2)[2]
        with DBI._conn() as con:
            row = con.execute("SELECT id, last_name, first_name, tg_id FROM employees WHERE display=?", (disp,)).fetchone()
        if not row:
            await callback.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"); await callback.answer(); return
        eid, ln, fn, tg = row
        tg_text = tg if tg else "‚Äî"
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å TG ID", callback_data=f"emp:tg:start:{eid}")
        kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"emp:del:ask:{eid}")
        kb.button(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã", callback_data=f"emp:busy:view:{eid}")
        kb.adjust(1)
        await callback.message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫:\n–§–∞–º–∏–ª–∏—è: {ln}\n–ò–º—è: {fn}\nTelegram ID: {tg_text}", reply_markup=kb.as_markup())
        await callback.answer(); return

async def emp_del_ask(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True); return
    try:
        eid = int((callback.data or "").split(":", 3)[3])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True); return
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"emp:del:yes:{eid}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="emp:del:no")
    kb.adjust(1)
    await callback.message.answer("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?", reply_markup=kb.as_markup())
    await callback.answer()

async def emp_del_yes(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True); return
    try:
        eid = int((callback.data or "").split(":", 3)[3])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True); return
    DBI.delete_employee(eid)
    await callback.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω ‚úÖ")
    await callback.answer()

async def emp_del_no(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True); return
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

async def emp_tg_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True); return
    try:
        eid = int((callback.data or "").split(":", 3)[3])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True); return
    await state.update_data(edit_emp_id=eid)
    await state.set_state(EditEmployeeTg.waiting_for_tg)
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π Telegram ID (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' / '–û—á–∏—Å—Ç–∏—Ç—å')")
    await callback.answer()

async def emp_tg_set_value(message: Message, state: FSMContext):
    data = await state.get_data()
    eid = data.get('edit_emp_id')
    if eid is None:
        await message.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."); await state.clear(); return
    raw = (message.text or '').strip().lower()
    if raw == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); await state.clear(); return
    if raw in {'–æ—á–∏—Å—Ç–∏—Ç—å','—É–¥–∞–ª–∏—Ç—å','-'}:
        DBI.set_employee_tg_by_id(eid, None)
        await message.answer("Telegram ID –æ—á–∏—â–µ–Ω ‚úÖ"); await state.clear(); return
    DBI.set_employee_tg_by_id(eid, (message.text or '').strip())
    await message.answer("Telegram ID –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    await state.clear()